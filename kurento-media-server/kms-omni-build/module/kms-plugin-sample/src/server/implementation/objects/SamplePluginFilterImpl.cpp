/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include "MediaPipelineImpl.hpp"
#include <SamplePluginFilterImplFactory.hpp>
#include "SamplePluginFilterImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

#define GST_CAT_DEFAULT kurento_sample_plugin_filter_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "KurentoSamplePluginFilterImpl"

namespace kurento
{
namespace module
{
namespace sampleplugin
{

SamplePluginFilterImpl::SamplePluginFilterImpl (const boost::property_tree::ptree &config,
                                    std::shared_ptr<MediaPipeline> mediaPipeline)
: FilterImpl (config, std::dynamic_pointer_cast<MediaPipelineImpl> (mediaPipeline))
{
  GstElement* sampleplugin;

  g_object_set (element, "filter-factory", "samplefilter", NULL);

  g_object_get (G_OBJECT (element), "filter", &sampleplugin, NULL);

  if (sampleplugin == NULL) {
    throw KurentoException (MEDIA_OBJECT_NOT_AVAILABLE,
                            "Media Object not available");
  }

  g_object_unref (sampleplugin);
}

void SamplePluginFilterImpl::setFilterType (int filterType)
{
  g_object_set (element, "type", filterType, NULL);
}

void SamplePluginFilterImpl::setEdgeThreshold (int edgeValue)
{
  g_object_set (element, "edge-value", edgeValue, NULL);
}

MediaObjectImpl *
SamplePluginFilterImplFactory::createObject (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline) const
{
  return new SamplePluginFilterImpl (config, mediaPipeline);
}

SamplePluginFilterImpl::StaticConstructor SamplePluginFilterImpl::staticConstructor;

SamplePluginFilterImpl::StaticConstructor::StaticConstructor()
{
  GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
                           GST_DEFAULT_NAME);
}

} /* sampleplugin */
} /* module */
} /* kurento */
