type Query {
    getUserById (id: ID!): User
    getUsers: [User]
    getItemById (id: ID!): Item
    getItems: [Item]
    getOrderById (id:ID!): Order
    getOrders: [OrderDomain]
}

type Mutation {
    cancelOrder(cancelOrder: CancelOrderDto!):Order
    createUser(username: String!, age: Int!, email:String): User
    createItem(input: CreateItemDto!):Item
    updateItem(input: UpdateItemDto!):Item
    createOrder(input: CreateOrderDto!):Order
    createOrderItem(
        item:Int!
        order:Int!
        orderPrice:Int!
        count:Int!
    ):OrderItem
}

type OrderItem {
    id:ID!
    item:Int!
    order:Int!
    orderPrice:Int!
    count:Int!
}

type Order {
    id:ID!
    userId:Int!
    orderItemId:Int!
    orderStatus:String!
}

type OrderDomain {
    id:ID
    userId:Int
    orderItemId:[Int]
    orderStatus:String
}

type Item {
    id:ID!
    stockQuantity:Int!
    price:Int!
    name:String!
}

type User {
    id: ID!
    username: String!
    age: Int!
    email:String
}

input UpdateItemDto {
    id: Int!
    name: String
    price: Int
    stockQuantity: Int
}

input CreateItemDto {
    name : String!
    price : Int!
    stockQuantity : Int!
    type: String!
    imgPath: String!
}

input CreateOrderDto {
    userId : Int!
    itemIds : [Int!]!
    price : Int!
    quantity : Int!
}

input CancelOrderDto {
    orderId: Int!
}